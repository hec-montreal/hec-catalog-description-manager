<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE beans PUBLIC "-//SPRING//DTD BEAN//EN"
	"http://www.springframework.org/dtd/spring-beans.dtd">

<beans>
	<!--  taken from example application tasklist at http://source.sakaiproject.org/contrib/programmerscafe/tags/sakai-2.2/tasklist/ -->
	
	<!-- Use the Sakai session factory, pre-configured, instead of a local one
	we are adding our HBM files to the Sakai session factory instead of creating
	our own copy of it -->
	<bean id="org.sakaiproject.springframework.orm.hibernate.impl.AdditionalHibernateMappingsImpl.cdm"
		class="org.sakaiproject.springframework.orm.hibernate.impl.AdditionalHibernateMappingsImpl">
		<property name="mappingResources">
			<list>
				<value>ca/hec/cdm/hbm/CatalogDescription.hbm.xml</value>
			</list>
		</property>
	</bean>

	<!--  create a target bean using the Dao implementation -->
	<bean id="ca.hec.cdm.CatalogDescriptionDaoTarget" class="ca.hec.cdm.dao.impl.CatalogDescriptionDaoImpl" singleton="true">
		<property name="sessionFactory" ref="org.sakaiproject.springframework.orm.hibernate.GlobalSessionFactory" />
		<property name="stopWordList" ref="ca.hec.cdm.util.Stopwords" />
	</bean>
	
	<!--  create a bean for CatalogDescription Quartz job DAO ( accesses materialized views of PeopleSoft database)-->
	<bean id="ca.hec.cdm.CatalogDescriptionJobDaoTarget" class="ca.hec.cdm.jobs.dao.impl.CatalogDescriptionJobDaoImpl" singleton="true">
		<property name="sessionFactory" ref="peopleSoftSessionFactory" />
	</bean>
	
	
	<!--  create an hibernate session factory for accessing peopleSoft database -->
	<bean id="peopleSoftSessionFactory" class="org.springframework.orm.hibernate3.LocalSessionFactoryBean">
	   <property name="dataSource" ref="javax.sql.PeopleSoftLazyDataSource" />
	   <property name="hibernateProperties">
			<props>
				<prop key="hibernate.dialect">${hibernate.dialect}</prop>
				<prop key="hibernate.query.factory_class">org.hibernate.hql.ast.ASTQueryTranslatorFactory</prop>
				<prop key="hibernate.show_sql">${hibernate.show_sql}</prop>
				<prop key="hibernate.query.substitutions">
					true 1, false 0, yes 'Y', no 'N'
				</prop>
				<prop key="hibernate.jdbc.use_streams_for_binary">true</prop>
				<prop key="hibernate.cache.use_query_cache">true</prop>
				<prop key="hibernate.cache.provider_class">
				     org.sakaiproject.springframework.orm.hibernate.SakaiCacheProvider
				</prop>
			</props>
		</property>
		<property name="mappingLocations">
			<list>
				<value>classpath:ca/hec/cdm/jobs/hbm/CourseOffering.hbm.xml</value>
			</list>
		</property>
	</bean>
	
	 <!-- Proxy which will keep only get the connection if one is actually needed,
       this is especially helpful when using hibernate or wrapping transactions around requests
       because it keeps the connection from being opened and held if it is not needed -->
    <bean id="javax.sql.PeopleSoftLazyDataSource" class="org.springframework.jdbc.datasource.LazyConnectionDataSourceProxy">
       <property name="targetDataSource"><ref local="javax.sql.PeopleSoftBaseDataSource" /></property>
    </bean>
	
	<!-- Base DataSource for all pooled database connections -->
	<!-- See http://jakarta.apache.org/commons/dbcp/configuration.html -->
	<bean id="javax.sql.PeopleSoftBaseDataSource" 
			class="org.apache.commons.dbcp.SakaiBasicDataSource"
			destroy-method="close">
			</bean>

	<!-- give the dao access to the global transaction manager so we can get to the global session factory
	 and the HBM defined data -->
	<bean id="ca.hec.cdm.api.CatalogDescriptionDao"
		class="org.springframework.transaction.interceptor.TransactionProxyFactoryBean"
		singleton="true">
			<property name="transactionManager" ref="org.sakaiproject.springframework.orm.hibernate.GlobalTransactionManager" />
			<property name="target" ref="ca.hec.cdm.CatalogDescriptionDaoTarget"/>
			<property name="transactionAttributes">
				<props>
					<prop key="*">PROPAGATION_REQUIRED</prop>
				</props>
			</property>
	</bean>
	
	<!-- give the dao access to the global transaction manager so we can get to the global session factory
	 and the HBM defined data -->
	<bean id="ca.hec.cdm.jobs.CatalogDescriptionJobDao"
		class="org.springframework.transaction.interceptor.TransactionProxyFactoryBean"
		singleton="true">
			<property name="transactionManager" ref="org.sakaiproject.springframework.orm.hibernate.GlobalTransactionManager" />
			<property name="target" ref="ca.hec.cdm.CatalogDescriptionJobDaoTarget"/>
			<property name="transactionAttributes">
				<props>
					<prop key="*">PROPAGATION_REQUIRED</prop>
				</props>
			</property>
	</bean>

	<!--  create a catalogDescriptionService bean, give it the dao from above -->
	<bean id="ca.hec.cdm.api.CatalogDescriptionService"
			class="ca.hec.cdm.impl.CatalogDescriptionServiceImpl"
			init-method="init"
			singleton="true">
 		<property name="catalogDescriptionDao" ref="ca.hec.cdm.api.CatalogDescriptionDao"/>
	</bean></beans>
